{"version":3,"sources":["taskList.js","App.js","serviceWorker.js","index.js"],"names":["TaskList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","addItem","event","preventDefault","setState","todo","concat","toConsumableArray","state","currentTodo","target","taskName","value","handleChange","Deletor","splice","_this2","react_default","a","createElement","className","onSubmit","htmlFor","onChange","name","type","placeholder","map","index","onClick","Component","taskList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wOAsDeA,cAlDf,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAEdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAORQ,QAAU,SAAAC,GACRA,EAAMC,iBACNT,EAAKU,SAAS,CACZC,KAAI,GAAAC,OAAAX,OAAAY,EAAA,EAAAZ,CAAKD,EAAKc,MAAMH,MAAhB,CAAsBX,EAAKc,MAAMC,gBAEvCP,EAAMQ,OAAOC,SAASC,MAAM,IAddlB,EAgBhBmB,aAAa,SAAAX,GACXR,EAAKU,SAAS,CAACK,YAAaP,EAAMQ,OAAOE,SAjB3BlB,EAoBhBoB,QAAQ,SAAAZ,GAEER,EAAKc,MAAMH,KACNU,OAAOb,EAAMQ,OAAOE,MAAO,GACxClB,EAAKU,SAAS,CAACC,KAAMX,EAAKc,MAAMH,QArBhCX,EAAKc,MAAM,CACPH,KAAK,GACPI,YAAa,IALDf,wEA4BhB,IAAAsB,EAAAnB,KACE,OAEEoB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,QAAME,SAAUxB,KAAKI,SACnBgB,EAAAC,EAAAC,cAAA,SAAOG,QAAQ,YAAf,eAEAL,EAAAC,EAAAC,cAAA,SAAOI,SAAU1B,KAAKgB,aACrBW,KAAK,WAAWC,KAAK,OAAOC,YAAY,mBAEzCT,EAAAC,EAAAC,cAAA,UAAQM,KAAK,UAAb,aAGI5B,KAAKW,MAAMH,KAAKsB,IAAI,SAACtB,EAAMuB,GAAP,OACpBX,EAAAC,EAAAC,cAAA,UAAKd,EAAL,IAAWY,EAAAC,EAAAC,cAAA,UAAQM,KAAK,SAASI,QAASb,EAAKF,QAASF,MAAOgB,GAApD,UAAX,gBA3CSE,aCoBRzB,cAhBb,SAAAA,EAAYZ,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAQ,IAChBX,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAU,GAAAL,KAAAH,KAAMJ,KACDe,MAAM,GAFKd,wEAQhB,OACEuB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACY,EAAD,cAbWD,aCQCE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.33dda41e.chunk.js","sourcesContent":["import React,{Component} from 'react';\n\n\nclass TaskList extends Component{\nconstructor(props){\n\n    super(props)\n    this.state={\n        todo:[],\n      currentTodo: \"\",\n    }\n}\n    \n  addItem = event=>{\n    event.preventDefault();\n    this.setState({\n      todo:[...this.state.todo, this.state.currentTodo]\n    })\n    event.target.taskName.value='';\n  }\n  handleChange=event=>{\n    this.setState({currentTodo: event.target.value});\n  }\n\n  Deletor=event=>\n  {\n    let arr=this.state.todo;\n    let newA=arr.splice(event.target.value, 1);\n    this.setState({todo: this.state.todo})\n    }\n\n  render()\n  {\n    return(\n      \n      <div className=\"Container\">\n        <form onSubmit={this.addItem}>\n          <label htmlFor=\"taskName\">Task Name: </label>\n\n          <input onChange={this.handleChange}\n           name=\"taskName\" type=\"text\" placeholder=\"Add to-do here\" />\n\n          <button type=\"submit\">Add Task</button>\n        </form>\n           \n             {this.state.todo.map((todo, index) =>\n              <li>{todo} <button type=\"button\" onClick={this.Deletor} value={index}>Delete</button>  </li> \n                    )}\n                  \n    </div>\n  )\n}\n    \n}\nexport default TaskList;","import React,{Component} from 'react';\nimport './App.css';\nimport TaskList from './taskList';\n\nclass todo extends Component{\n\n\n  constructor(props){\n    super(props);\n    this.state={\n      \n      }\n  }\n  render()\n  {\n    return(\n      <div>\n        <TaskList/>\n      </div>\n    )\n  }\n\n}\nexport default todo;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}